#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2019/7/7 21:00
# @Author  : WM
# @File    : data structure.py

'''学习内容：
字符串的使用 - 计算长度 / 下标运算 / 切片 / 常用方法
'''
#字符串不能被修改.字符串表达形式：可以使用单引号（'……'），双引号（"……"） ；特殊字符会使用反斜杠来转义
#s[i]索引，
# s[i:j]分片，切片的开始总是被包括在结果中，而结束不被包括。这使得 s[:i] + s[i:] 总是等于 s;
# 切片的索引有默认值；省略开始索引时默认为0，省略结束索引时默认为到字符串的结束:
# len(s)求长度

word = "python"
#word[0] = 'J'#TypeError: 'str' object does not support item assignment,字符串不能被修改,修改会报此错
#常用方法：
#1.字符串的分割
#name.split()  默认是按照空格分割
#name.split(',')   按照逗号分割
# 2.去掉空格和特殊符号
# name.strip()  去掉空格和换行符
# name.strip('xx')  去掉某个字符串
# name.lstrip()  去掉左边的空格和换行符
# name.rstrip()  去掉右边的空格和换行符
#截取字符串（切片）,进行字符串删除
'''
str = '0123456789'
print (str[0:3]) #截取第一位到第三位的字符
print (str[:]) #截取字符串的全部字符
print (str[6:]) #截取第七个字符到结尾
print (str[:-3]) #截取从头开始到倒数第三个字符之前
print (str[2]) #截取第三个字符
print (str[-1]) #截取倒数第一个字符
print (str[::-1]) #创造一个与原字符串顺序相反的字符串
print (str[-3:-1]) #截取倒数第三位与倒数第一位之前的字符
print (str[-3:]) #截取倒数第三位到结尾
print (str[:-5:-3]) #逆序截取
'''
#字符串的搜索和替换
'''
name="sdjfxni"
print(name.count('x') ) #查找某个字符在字符串里面出现的次数
print(name.capitalize()) # 首字母大写
print(name.center(10,'-'))  # 把字符串放中间，两边用- 补齐;结果为：-sdjfxni--
name.find('x')  # 找到这个字符返回下标，多个时返回第一个；不存在的字符返回-1
name.index('x') #找到这个字符返回下标，多个时返回第一个；不存在的字符报错
print(name.replace("xni", "hhh"))# 字符串替换,name.replace(oldstr, newstr)
'''
#字符串与日期的转换
'''
import time,datetime
#时间转字符串
print(time.strftime("%Y-%m-%d"),time.localtime())
#字符串转时间
t = time.strptime("2019-07-06","%Y-%m-%d")
print(t)
y,m,d = t[0:3]
print(datetime.datetime(y,m,d))
'''
#字符串的比较==,!=
'''
列表基本用法 - 定义列表 / 用下表访问元素 / 下标越界 / 添加元素 / 删除元素 / 修改元素 / 切片 / 循环遍历
列表常用操作 - 连接 / 复制(复制元素和复制数组) / 长度 / 排序 / 倒转 / 查找
生成列表 -
使用range创建数字列表 / 生成表达式 / 生成器
'''
#列表： 复合 数据类型，一个 列表 可以包含不同类型的元素，但通常使用时各个元素类型相同
#列表也支持索引和切片，所有的切片操作都返回一个新列表，这个新列表包含所需要的元素

#增：使用append()方法在列表末尾来添加列表项;使用insert()方法在列表指定位置插入一个数；

# 删除：列表的的元素有三种方法：del 语句,remove(),pop();修改元素直接取列表中的一个元素然后重新赋值
# del 语句：dellist[start:end:step]，从列表中删除指定位置的元素根据索引(元素所在位置)来删除,既可删除列表中的单个元素，也可直接删除列表的中间一段,也可以直接删除变量
# remove():list.remove(元素),从列表中删除一个元素，且并不要求此元素的位置，只删除第一个找到的元素，如果找不到该元素，该方法将会引发 ValueError 错误
#  pop(): list.pop(元素序号),无参情况下默认最后一个元素，并且返回该元素的值

#改：列表中的元素直接更改、替换replace()
#查：in、not in、count、index，find
# list=[1,2,3,4,5]
# for i in list:
#     print(i)
# print('-----')
# for i in iter(list):
#     print(i)
# print('----')
# for i in enumerate(list):
#     print(i)
# print('---')
# for i in range(len(list)):
#     print(list[i])
#列表同样支持拼接操作:
squares = [1, 4, 9, 16, 25]
squares  = squares + [36, 49, 64, 81, 100]
#在列表结尾，通过 append() 方法 添加新元素;内置函数 len()也可以用于列表,
squares.append(111)
print(squares )
#嵌套列表 (创建包含其他列表的列表)
x = [['a', 'b', 'c'], [1, 2, 3]]
#	cmp(list1, list2)比较两个列表的元素
#	max(list),min(list)# 返回列表元素最大值,最小值
#  list(seq)将元组转换为列表
#copy() 函数用于复制列表
#	list.count(obj) 统计某个元素在列表中出现的次数
# list.index(obj) 从列表中找出某个值第一个匹配项的索引位置
# list.reverse() 反向列表中元素
# list.sort(cmp=None, key=None, reverse=False) 对原列表进行排序，默认自动按照字母顺序对字符串由小到大排序，如果数字就由小到大
'''
注：sort（）会修改原来的列表他是修改列表，而不是创建新的列表,所以不能
                print(list.sort())
                b.sorted() 函数对所有可迭代的对象进行排序操作；sort 是应用在 list 上的方法，
                sorted 可以对所有可迭代的对象进行排序操作
                sorted(iterable, key=None, reverse=False)
                iterable -- 可迭代对象。
                key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
                reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。
                c.reverse() 函数用于反向列表中元素。list.reverse()'''
vowels = ['e', 'a', 'u', 'o', 'i']
# 降序
vowels.sort(reverse=True)
print(vowels)
#使用range创建数字列表
even_numbers = list(range(2,11,2))
print(even_numbers)

# 列表表达式：
# (1) 语法1：[表达式 for 变量 in 列表]，表示把得到的每一个变量值都放到 for 前面的表达式中计算 ，然后生成一个列表
# (2) 语法2：[表达式 for 变量 in 列表 if 条件]，如果加上 if 判断，则表示把每一个变量值进行判断，如果判断正确再交给表达式进行计算，然后生成一个列表
a = [i*2 for i in range(10) if i == 4]
print(a)
# 生成器表达式：
# (1) 生成器是一个特定的函数，允许返回一个中间值，然后挂起代码的执行，稍后再恢复执行
# (2) 列表表达式的结果会以列表的形式一次性返回所有的数据，如果数据量很大，就会很占内存，所以不适用于迭代大量的数据
# (3) 生成器表达式的结果则会返回一个生成器对象，只有当我们去调用这个对象的时候才会读取里面的值，因此生成器表达式是一个对内存使用友好的结构
# (4) 生成器表达式的语法跟列表表达式的语法是一样的，只是把中括号换成圆括号，如：(表达式 for 变量 in 列表 if 条件)
for i in (i*2 for i in range(10)):    # 只有被调用的时候才会读取里面的值
    print(i)


'''元组的使用 -
定义元组 / 使用元组中的值 / 修改元组变量 / 元组和列表转换
'''
# 元组与列表类似，不同之处在于元组的元素不能修改
# 创建空元组
# tup1 = ()
# tup1 = (50,)#元组中只包含一个元素时，需要在元素后面添加逗号,下标索引从0开始，可以进行截取，组合等
# 修改：元组中的元素值是不允许修改的，但我们可以对元组进行连接组合
# # 创建一个新的元组 tup3 = tup1 + tup2
# 删除：元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组,del tup
# 元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组
# ('Hi!',) * 4 == ('Hi!', 'Hi!', 'Hi!', 'Hi!')
# 更新：即为创建一个新的元组：切片的方式
#元组和列表转换
# list1=[1,2,3]
# tup1=tuple(list1)
# print(tup1)
# print(list(tup1))


'''
集合基本用法 -
集合和列表的区别 / 创建集合 / 添加元素 / 删除元素 / 清空
集合
常用操作 - 交集 / 并集 / 差集 / 对称差 / 子集 / 超集
'''
# 集合是一个可变容器,
# 集合内的数据对象都是唯一的(不能重复),
# 集合是无序的存储结构,
# 集合内的数据没有先后关系,
# 集合是可迭代对象,
# 集合相当于是只有键没有值得字典(键就是集合中的数据)
# 集合内的元素是不可变的
#
# s = {"hello",3.14,True,(2019,02,17)}#直接使用直接量创建集合，
#
# 集合的运算
# 　　　　交集，并集，补集，子集，超集
# 　　　　1.交集 - &
# 　　　　　　s1 = {1,2,3}
# 　　　　　　s2 = {2,3,4}
# 　　　　　　s3 = s1 & s2 # s3 = {2,3}
# 　　　　2.并集 - |
# 　　　　　　s1 = {1,2,3}
# 　　　　　　s2 = {2,3,4}
# 　　　　　　s3 = s1 | s2 #s3 = {1,2,3,4}
# 　　　　3.补集 - -
# 　　　　　　s1 = {1,2,3}
# 　　　　　　s2 = {2,3,4}
# 　　　　　　s3 = s1 - s2 #生成属于s1 但 不属于s2的所有的元素
# 　　　　　　#s3 = {1}
# 　　　　4.对称补集 - ^
# 　　　　　　s1 = {1,2,3}
# 　　　　　　s2 = {2,3,4}
# 　　　　　　s3 = s1 ^ s2 # (s1 - s2) | (s2 - s1)
# 　　　　5.超集 - >
# 　　　　6.子集 - <
# 　　　　　　s1 = {1,2,3}
# 　　　　　　s2 = {2,3}
# 　　　　　　s1 > s2 # True s1 是 s2 的超集
# 　　　　　　s1 < s2 # False s1 不是 s2 的子集
# 　　　　7.集合的相等 - ==
# 　　　　8.集合的不等 - !=
# 　　　　　　s1 = {1,2,3}
# 　　　　　　s2 = {3,2,1}
# 　　　　　　s1 == s2 #True,集合相等
# 　　　　9.成员运算 - in , not in
# 　　　　　　等同于字典 in , not in
# 　　　　　　目的：判断某个值在集合中存在 / 不存在
#
# 集合的方法：
# 集合对象.add(elem)#向集合内增加元素，如果添加的元素已经存在的话，则不执行任何操作，elem表示要增加的元素
# 集合对象.clear()#清空集合内所有的元素
# 集合对象.copy()#返回已复制的集合对象
# 集合对象1.difference(集合对象2)#补集结果，即出现在集合1中但没出现在集合2中的元素集合 ,集合对象1 - 集合对象2
# 集合对象1.difference_update(集合对象2)#移除两个集合中都存在的元素,注意：直接从集合对象1中删除交集
# s1.issuperset(s2)#如果s1 包含 s2 ，则返回True；如果s1 不包含 s2 ，则返回False(如果s2中有的元素没在s1中)
# s1.isdisjoint(s2)#判断两个集合中是否包含相同的元素，如果没有返回True，否则返回False
# set1.intersection(set2,set3,set4)#返回两个或多个集合中的交集元素；参数：做交集的集合对象，可以是多个
# 集合对象.pop()#用于随机删除一个元素
# 集合对象.remove(移除元素)#注意：如果要移除的元素不存在，则发生错误
# 集合对象.discard(移除元素)#注意：如果要删除不存在的元素，不会发生错误
# s1.union(s2)#返回两个集合的并集即返回两个集合中所有的元素，重复元素只出现一次
# s1.update(s2)#修改当前集合，也可以添加新元素到集合中
#
# 固定集合 - frozenset
# 不可变的容器 - 允许作为字典的键;无序的;元素唯一
# 1.frozenset() : 创建一个空的固定集合
# 2.frozenset(iterable) : 使用可迭代对象创建固定集合


'''字典的基本用法 - 字典的特点 / 创建字典 / 添加元素 / 删除元素 / 取值 / 清空
字典常用操作 - keys()方法 / values()方法 / items()方法 / setdefault()方法
'''
#字典可存储任意类型对象，如字符串、数字、元组……
#字典由键（key）和对应值（value）成对组成。字典也被称作关联数组或哈希表。基本语法如下：
d = {'Alice': '2341', 'Beth': '9102', 'Cecil': '3258'}
#每个键与值用冒号隔开（:），每对用逗号分割，整体放在花括号中（{}）。键必须独一无二，但值则不必。
#print(d.keys())  #获取所有的key 值
#print(d.values()) #获取所有的value 值
if  'Alice' in d:   #判断key是否存在
    print('key')
#for k,v in d.items():   #遍历字典
   # print(k,v)

#修改字典
#d['key'] = 'value'  #key 存在即修改，key不存在即新增
#d.setdefault('key','value')  # 只能新增

#删除字典元素
#d.pop('Alice') # 必须要传值，因为字典是无序的
#d.popitem()  #随机删除一个
#del d['key']
#d.clear()  #清空字典
print(d.items())  # 输出一个list格式（非真正意义上的list）
print(list(d.items())) # 把字典的key 和 value 转成一个多维list